Introduction to OpenMDAO Development Process
--------------------------------------------

This documentation for OpenMDAO developers attempts to explain the OpenMDAO
development process and how to interact with the various tools the project uses for
configuration management, testing, deployment, etc.  The source files for this tutorial
can be found in the ``docs/dev-guide`` directory in the top level directory of your
OpenMDAO source :term:`branch`. 

.. index:: zc.buildout
.. index:: Bazaar


System Configuration
====================

Some steps of the development process, e.g., downloading a branch of the source
repository and downloading Python eggs, require network access.  If you're
behind an http proxy, you'll have to set the *http_proxy* environment variable
on your system in order for Bazaar and ``zc.buildout`` to function properly.

In these early stages of the project, we are developing mostly on Linux,
with occasional testing on Windows, but in the near term we plan to start
full testing on Linux, Windows, and OS X.


Getting Started
===============

Before you can start working on source code or running tests, you need to get
your own copy of the source code and create an environment that contains all  of
the Python modules you will need.  To accomplish these things, you will be using
two tools: `Bazaar, <http://bazaar-vcs.org>`_ to configuration manage your
source code, and  `zc.buildout, <http://pypi.python.org/pypi/zc.buildout>`_ to
keep track  of all  of the Python packages that your code depends on. For a
gentle video introduction to ``zc.buildout``, check out
http://rhodesmill.org/brandon/buildout. Note that the sound does not work on the
local GRC machine called *torpedo*, so GRC users should view the buildout video
intro from another machine. 


.. _`Setting-Up-a-Local-Cache-of-Installed-Distributions`:

*Setting Up a Local Cache of Installed Distributions*
+++++++++++++++++++++++++++++++++++++++++++++++++++++


Prior to running any buildouts, you should set up a default config file that
specifies the location of a directory where installed distributions can be kept.
If you don't do this, each time you do a buildout, your buildout will have its own copy of 
all of the distributions that the buildout depends on, and running the buildout 
will take longer because each distribution will have to be downloaded and
installed in the ``buildout/eggs`` directory.

To create your default buildout config file, start by making a ``.buildout`` 
directory under your home directory.  Within that directory, create a file
called ``default.cfg`` and put the following text in it:

::

    [buildout]
    eggs-directory = <your_installed_distrib_dir>
    
    
where ``<your_installed_distrib_dir>`` is the path to the directory where you 
want the Python distributions used by your buildouts to be installed.  

Note that this directory may contain many distributions with the same package
name, because the version number is included in the name of the distribution
along with the package name, and even the platform name for binary distributions.
This makes the name of each distribution unique.



*Bazaar User Setup*
+++++++++++++++++++

If you have not previously used Bazaar on a particular machine where you intend
to work with Bazaar repositories, you should run the ``whoami``
command so that Bazaar will know your email address. You need to supply your
first and last name and your email address in the following way:

::

    bzr whoami "Joe Cool <joe@example.com>"


.. index:: repository

This way, your contact information will be included whenever you :term:`commit`
to a :term:`repository` on that machine.

.. index:: pair: source code; location
.. index:: branch


*Code Location*
+++++++++++++++
    

The Bazaar repository for the OpenMDAO source code is available on Launchpad.
You can get a copy of the repository as follows:

::

    bzr branch lp:openmdao <your_branch_name>

To submit patches you must upload your branch to the openmdao repository on Launchpad
and request that it be merged. Please see :ref:`Pushing-a-Branch-Back-to-Launchpad`


.. index:: source repository
.. index:: buildout


*Layout of a Source Repository*
+++++++++++++++++++++++++++++++

Within an OpenMDAO branch repository,  the directory structure will look like
this:

``buildout``
    The directory containing the buildout configuration file(s) and all of 
    the content generated by the buildout
    
``docs``
    All Sphinx user documentation for OpenMDAO.  The documentation
    is broken up into several major documents, each found in a separate 
    subdirectory, e.g., ``arch-doc`` contains the Architecture
    Document, ``dev-guide`` contains the Developer's Guide, and ``user-guide``
    contains the User's Guide.   
    
``openmdao.main``
    Python package containing all infrastructure source for OpenMDAO.
    
``openmdao.lib``
    Python package containing source for the OpenMDAO standard library of 
    modules.
    
``openmdao.recipes``
    Python package containing source for any buildout recipes developed for
    OpenMDAO.
    
``openmdao.util``
    Python package containing source for various Python utility routines
    used by OpenMDAO developers.
    
``openmdao.test``
    Python package containing source for various OpenMDAO plugins used for
    testing.
    
``openmdao.examples``
    Python package containing examples of using OpenMDAO.
    
``misc``
    Miscellaneous scripts and configuration files used by OpenMDAO developers.
 
.. index:: egg
    
``contrib``
    Contains source to be packaged into Python :term:`eggs` that are releasable
    separately from OpenMDAO.  These eggs may or may not depend upon OpenMDAO. 
    Eggs that have not yet been approved to be part of openmdao.lib can live
    here, as long as their license is compatible with NOSA. No proprietary code
    or GPL code can live in the OpenMDAO repository.


.. index:: namespace package

*Layout of a Namespace Package*
+++++++++++++++++++++++++++++++

OpenMDAO is large enough that it makes sense to split it up into multiple Python
packages, but we want all of those packages to be under the umbrella of
``openmdao``. To do this in Python, we use what is called a *namespace*
package.  Namespace  packages all have a similar directory layout.  Currently in
OpenMDAO,  ``openmdao.main``, ``openmdao.lib``, ``openmdao.recipes``,
``openmdao.util`` and ``openmdao.test`` are all namespace
packages that are in the ``openmdao`` namespace.  They all  have a layout like
this:

``openmdao.<package>``
    The top level directory for the package denoted by ``<package>``. This
    contains the ``setup.py`` script which is used to build and 
    create an egg for the package.
    
``openmdao.<package>/src``
    Contains all of the package source code.
    
``openmdao.<package>/src/openmdao``
    Contains a special ``__init__.py`` file and a ``<package>``
    subdirectory.
    
``openmdao.<package>/src/openmdao/<package>``
    This is where the actual source code, usually a bunch of Python files,
    is located.  There could be a standard Python package directory structure
    under this directory as well.
    

.. index:: pair: branch; creating 
.. index:: buildout


Creating Your Branch
____________________


To create a branch, use the command:

::

   bzr branch lp:openmdao <branch_name>
   
   
where ``<branch_name>`` is the name you are giving to the top level directory
of your branch repository.  The name should reflect the purpose of the branch to
avoid confusion in the case where you have multiple branches active at the same time.
If you do not supply ``<branch_name>``, the name by default will be the last part of
the source repository URI, which in this case is ``openmdao``.


At Glenn Research Center (GRC), we name branches based on ticket numbers in the bug tracker, and we use
the form ``T<ticket_number>-<desc>`` where ``ticket_number`` is the bug tracker
ticket number and ``<desc>`` is a short description of the branch. For example,
``T0029-workflow_fix``.
   

After you've created your branch, change your directory to the ``buildout``
directory within the top level directory of the repository ``<branch_name>``
and run:

::

   <python> isolated_bootstrap.py
   
where ``<python>`` is the specific version of Python you want to use for the
branch, for example, ``python2.6``.  Whatever version of Python you use for this
command will be *hard-wired* into all of the buildout-generated scripts. Note
that ``isolated_bootstrap.py`` is a modified version of ``bootstrap.py``, which can be
found in the ``<branch_name>/misc/branch_config`` directory. Using
``isolated_bootstrap.py`` will isolate your buildout from the system level Python
install, while using the regular ``bootstrap.py`` will allow use of distributions from
the system level.


At this point, your ``buildout`` directory should contain the following
subdirectories:

``bin``
    Contains the buildout script, and after you run your buildout it will 
    contain a number of scripts generated during the buildout. These scripts
    will have a hardwired sys.path in them that includes all of the eggs
    that have been specified as dependencies in the buildout config file.

``develop-eggs``
    After running the buildout, contains links to any directories that have
    been specified in the *develop* list in the ``buildout.cfg`` file.
    
``parts``
    After running the buildout, contains any files specific to any parts that
    have been installed as part of the buildout. These could be anything. They
    do not have to be Python related.


If you see an ``eggs`` directory under your ``buildout`` directory, then
that means that you have not specified *eggs-directory* in your
``default.cfg`` file and you'll be getting a full copy of all dependent
distributions into your buildout. This may not be what you want. See
the earlier discussion in 
:ref:`Setting-Up-a-Local-Cache-of-Installed-Distributions` for how to set up
your  ``default.cfg`` file.
