
Introduction to OpenMDAO Development Process
--------------------------------------------

This is the beginning of the documentation for OpenMDAO developers that attempts
to explain the OpenMDAO development process and how to interact with the various
tools the project uses for configuration management, testing, deployment, etc. 
Right now, this is a very basic outline that needs to be greatly improved before
it is ready for production use.  So if you are reading this, consider yourself
an alpha tester of the process.  When you come across something that does not
work or is confusing, or if you have thought of a way to improve some aspect of
the process, please write it down and email it to Bret.A.Naylor@nasa.gov or edit
the file yourself. The source file for this tutorial can be found in ``???`` in
the top level directory of your OpenMDAO source :term:`branch`. If you don not know
what a branch is, that will be explained in a following section.

.. index:: zc.buildout
.. index:: Bazaar

Getting Started
===============

Before you can start working on source code or running tests, you need to get
your own copy of the source code and create an environment that contains all  of
the Python modules you will need.  To accomplish these things, you will be using
two tools: `Bazaar, <http://bazaar-vcs.org>`_ to configuration manage your
source code, and  `zc.buildout, <http://pypi.python.org/pypi/zc.buildout>`_ to
keep track  of all  of the Python packages that your code depends on.  A Python
script called ``mkbranch.py``  has been written to help cut down on the number
of manual steps required before you can start working on your :term:`branch`.  For a
gentle video introduction to zc.buildout, check out
http://rhodesmill.org/brandon/buildout. Note that on *torpedo* the sound does
not work, so it is better to view the buildout video intro from another
machine. 

If you have not previously used Bazaar on a particular machine where you intend
to work with Bazaar repositories, you should run the ``whoami``
command so that Bazaar will know your email address. You need to supply your
first and last name and your email address in the following format:

::

    bzr whoami "Joe Cool <joe@example.com>"


.. index:: repository

This way, your contact information will be included whenever you :term:`commit`
to a :term:`repository` on that machine.

.. index:: pair: source code; location
.. index:: branch

Where's the Code?
_________________


The OpenMDAO project source files are located under ``/OpenMDAO/`` on
*torpedo*.  This directory is called a *shared* repository, meaning that any
branches created under it share the same version tree.  Under ``/OpenMDAO/``
is a directory called ``trunk``.  This is the *official* version of the
OpenMDAO source. Developers cannot write directly to this version.  Writing
to the trunk can be done only by the configuration manager.  To make changes
to the code, a developer must first create a :term:`branch`, make  and test
changes, and then make the branch available to the configuration manager 
who will then merge the changes back into the trunk.

.. index:: pair: OpenMDAO; directory structure

The overall directory structure for OpenMDAO looks like this:

``/OpenMDAO``
    The top level directory
    
``/OpenMDAO/trunk``
    Release version of the code

``/OpenMDAO/dev/<username>``
    Shared repository where all active branches for user ``<username>`` are
    located

``/OpenMDAO/dev/<username>/T<ticket number>-<desc>``
    Top level directory of an active branch for :term:`ticket` ``<ticket number>``
    with description ``<desc>`` and owned by user ``<username>``
    
``/OpenMDAO/distrib-cache/dist``
    Directory containing Python distributions for all packages used in
    OpenMDAO


.. index:: source repository
.. index:: buildout

Layout of a Source Repository
+++++++++++++++++++++++++++++

Within a branch repository itself, located in 
``/OpenMDAO/dev/<username>/T<ticket number>-<desc>``, 
the directory structure will look like this:

``buildout``
    The directory containing the buildout configuration file(s) and all of 
    the content generated by the buildout
    
``docs``
    All Sphinx documentation for the OpenMDAO project
    
``openmdao.main``
    Python package containing all infrastructure source for OpenMDAO
    
``openmdao.lib``
    Python package containing source for the OpenMDAO standard library of plugins
    
``openmdao.recipes``
    Python package containing source for any buildout recipes developed for
    OpenMDAO
    
``openmdao.test``
    Python package containing source for various OpenMDAO plugins used for
    testing
    
``util``
    Miscellaneous scripts and configuration files used by OpenMDAO developers
 
.. index:: egg
    
``eggsrc``
    Contains source to be packaged into Python :term:`eggs` that are releasable separately
    from OpenMDAO.  These eggs may or may not depend upon OpenMDAO.  Eggs that have
    not yet been approved to be part of OpenMDAO.lib can live here, as can any eggs
    containing source that is not license compatible with NOSA, for example, GPL.


.. index:: namesake package

Layout of a Namespace Package
+++++++++++++++++++++++++++++++++++++

OpenMDAO is large enough that it makes sense to split it up into multiple Python
packages, but we want all of those packages to be under the umbrella of
``openmdao``. To do this in Python, we use what is called a *namespace*
package.  Namespace  packages all have a similar directory layout.  Currently in
OpenMDAO,  ``openmdao.main``, ``openmdao.lib``, ``openmdao.recipes``, and
``openmdao.test`` are all namespace packages that are in the ``openmdao``
namespace.  They all  have a layout like this:

``openmdao.<package>``
    The top level directory for the package denoted by ``<package>``. This
    contains the ``setup.py`` script which is used to build and 
    create an egg for the package.
    
``openmdao.<package>/docs``
    Documentation specific to the package.
    
``openmdao.<package>/openmdao``
    Contains nothing but a special ``__init__.py`` file and a ``<package>``
    subdirectory.
    
``openmdao.<package>/openmdao/<package>``
    This is where the actual source code, usually a bunch of Python files,
    is located.  There could also be a standard Python package directory structure
    under this directory as well.
    

.. index:: pair: branch; creating 
.. index:: buildout

Creating Your Branch
____________________


A Python script, called ``mkbranch.py`` located in the ``util`` directory of
the trunk will help create and configure your development branch for you.  It will
create your branch and create a buildout for you on the branch. Internally, the
script is simply talking to Bazaar and zc.buildout. You could perform these
tasks manually, but you should use the script in order to keep your branch
consistent with others in OpenMDAO.  This will make it easier for the
configuration manager to locate and merge your branch, and it will also make it
easier for other developers on the team to help you if you run into a problem.


.. index:: ticket

The following command will create a branch as well as create and bootstrap the
buildout:

::

  <python> /OpenMDAO/trunk/util/mkbranch.py -t <ticket number> [-d <description>][-s <source repository>][-u <user name>]

where the following parameters are user specified:

``<python>`` 
   The specific version of Python you want to use for the
   branch, for example, ``python2.6``.  Whatever version of Python you use for
   this command will be *hard-wired* into all of the buildout-generated scripts.

``<ticket number>``
   The ticket number used by the bug tracking system
   
``<description>``
   *(optional)* A short description  of the purpose of the branch. The description
   should be less than 15 characters in length. 
   
``<source repository>``
   *(optional)* The top directory of the repository you want to branch from. If
   not supplied, this defaults to the top directory of the trunk.
   
``<user name>``
   *(optional)* This should be your username on *torpedo*.  This is set 
   automatically for you based on the LOGNAME environment variable, so 
   generally you should not have to set this one.
   

As an example, if I wanted to create a branch off of the trunk to fix a bug in the
unit conversion code based on ticket 321 in the bug tracker and wanted to use
version 2.6 of Python, I could issue the following command:

::

   python2.6 /OpenMDAO/trunk/util/mkbranch.py -t 321 -d units_fix 


After the script runs, it places you in the 
``/OpenMDAO/dev/<username>`` directory, where ``<username>`` is your
user name on *torpedo*.  For example, since my user name is *bnaylor*, my branch
from the command above would be created in 
``/OpenMDAO/dev/bnaylor/T321-units_fix``. Branches are named using the
following form:

::

  T<ticket number>-<desc>


where ``<desc>`` is the short description supplied using the ``-d`` argument. 

At this point, your buildout should be configured, and your top level ``buildout``
directory should contain the following subdirectories:

``bin``
    Contains a buildout script, a buildout specific Python interpreter, and
    other scripts that depend upon which parts you have included as part of
    your buildout.

``develop-eggs``
    Contains links to any directories that you have
    specified in the *develop* list in your ``buildout.cfg`` file.
    
``eggs``
    Contains all of the installed eggs you have listed as dependencies in your
    ``buildout.cfg`` file.
    
``parts``
    Contains any files specific to any parts you have installed as part of your
    buildout. These could be anything. They do not have to be Python related.

