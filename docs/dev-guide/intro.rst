
Introduction to OpenMDAO Development Process
--------------------------------------------

This is the beginning of the documentation for OpenMDAO developers that attempts
to explain the OpenMDAO development process and how to interact with the various
tools the project uses for configuration management, testing, deployment, etc. 
The source files for this tutorial can be found in the ``docs/dev-guide``
directory in the top level directory of your OpenMDAO source :term:`branch`. 

.. index:: zc.buildout
.. index:: Bazaar

Getting Started
===============

Before you can start working on source code or running tests, you need to get
your own copy of the source code and create an environment that contains all  of
the Python modules you will need.  To accomplish these things, you will be using
two tools: `Bazaar, <http://bazaar-vcs.org>`_ to configuration manage your
source code, and  `zc.buildout, <http://pypi.python.org/pypi/zc.buildout>`_ to
keep track  of all  of the Python packages that your code depends on. For a
gentle video introduction to zc.buildout, check out
http://rhodesmill.org/brandon/buildout. Note that the sound does not work on the
local GRC machine called *torpedo*, so GRC users should view the buildout video
intro from another machine. 

If you have not previously used Bazaar on a particular machine where you intend
to work with Bazaar repositories, you should run the ``whoami``
command so that Bazaar will know your email address. You need to supply your
first and last name and your email address in the following way:

::

    bzr whoami "Joe Cool <joe@example.com>"


.. index:: repository

This way, your contact information will be included whenever you :term:`commit`
to a :term:`repository` on that machine.

.. index:: pair: source code; location
.. index:: branch


Code Location
_____________
    

The bazaar repository for the OpenMDAO source code is currently only available
to users with sftp access to the GRC host named *torpedo* because the OpenMDAO
public website is not yet active.  Once the site is activated, read-only access
will be available to anyone from ``bzr://openmdao.org/source/trunk``, and
patches can be submitted in the form of bazaar merge directives sent via email
to ``patches@openmdao.org``.


.. index:: source repository
.. index:: buildout

Layout of a Source Repository
+++++++++++++++++++++++++++++

Within a branch repository itself, ,  the directory structure will look like
this:

``buildout``
    The directory containing the buildout configuration file(s) and all of 
    the content generated by the buildout
    
``docs``
    All Sphinx documentation for OpenMDAO.  The documentation
    is broken up into several major documents, each found in a separate 
    subdirectory, e.g., ``arch-doc`` contains the Architecture
    Document, ``dev-guide`` contains the Developer's Guide, and ``user-guide``
    contains the User's Guide.
    
    
``openmdao.main``
    Python package containing all infrastructure source for OpenMDAO
    
``openmdao.lib``
    Python package containing source for the OpenMDAO standard library of 
    modules
    
``openmdao.recipes``
    Python package containing source for any buildout recipes developed for
    OpenMDAO
    
``openmdao.test``
    Python package containing source for various OpenMDAO plugins used for
    testing
    
``util``
    Miscellaneous scripts and configuration files used by OpenMDAO developers
 
.. index:: egg
    
``eggsrc``
    Contains source to be packaged into Python :term:`eggs` that are releasable
    separately from OpenMDAO.  These eggs may or may not depend upon OpenMDAO. 
    Eggs that have not yet been approved to be part of openmdao.lib can live
    here, as can any eggs containing source that is not license compatible with
    NOSA, for example, GPL.


.. index:: namespace package

Layout of a Namespace Package
+++++++++++++++++++++++++++++++++++++

OpenMDAO is large enough that it makes sense to split it up into multiple Python
packages, but we want all of those packages to be under the umbrella of
``openmdao``. To do this in Python, we use what is called a *namespace*
package.  Namespace  packages all have a similar directory layout.  Currently in
OpenMDAO,  ``openmdao.main``, ``openmdao.lib``, ``openmdao.recipes``, and
``openmdao.test`` are all namespace packages that are in the ``openmdao``
namespace.  They all  have a layout like this:

``openmdao.<package>``
    The top level directory for the package denoted by ``<package>``. This
    contains the ``setup.py`` script which is used to build and 
    create an egg for the package.
    
``openmdao.<package>/docs``
    Documentation specific to the package.
    
``openmdao.<package>/openmdao``
    Contains nothing but a special ``__init__.py`` file and a ``<package>``
    subdirectory.
    
``openmdao.<package>/openmdao/<package>``
    This is where the actual source code, usually a bunch of Python files,
    is located.  There could also be a standard Python package directory structure
    under this directory as well.
    

.. index:: pair: branch; creating 
.. index:: buildout


Creating Your Branch
____________________


To create a branch of the OpenMDAO source repository, run the following
command:

::

   bzr branch bzr://openmdao.org/source/trunk <branch_name>
   
where ``<branch_name>`` is the name your are giving to the top level directory
of your branch repository.  The name should reflect the purpose of the branch in
order to avoid confusion in the case where you have multiple branches active at
the same time. If you do not supply ``<branch_name>``, the name by default will
be the last part of the source repository URI, which in this case is ``trunk``.
At GRC, we name branches based on ticket numbers in the bug tracker, and we use
the form ``T<ticket_number>-<desc>`` where ``ticket_number`` is the bug tracker
ticket number and ``<desc>`` is a short description of the branch. For example,
``T0029-workflow_fix``.
   
Note that as of this writing, the ``openmdao.org`` web site is not active, so
the URI bzr://openmdao.org/source/trunk is not available yet.

After you've created your branch, change your directory to the ``buildout``
directory within the top level directory of the repository and run:

::

   <python> isolated_bootstrap.py
   
where ``<python>`` is the specific version of Python you want to use for the
branch, for example, ``python2.6``.  Whatever version of Python you use for
this command will be *hard-wired* into all of the buildout-generated scripts.


At this point, your buildout area should be configured, and your 
``buildout`` directory should contain the following subdirectories:

``bin``
    Contains a buildout script, a buildout specific Python interpreter, and
    other scripts that depend upon which parts you have included as part of
    your buildout.

``develop-eggs``
    Contains links to any directories that you have
    specified in the *develop* list in your ``buildout.cfg`` file.
    
``eggs``
    Contains all of the installed eggs you have listed as dependencies in your
    ``buildout.cfg`` file.
    
``parts``
    Contains any files specific to any parts you have installed as part of your
    buildout. These could be anything. They do not have to be Python related.

