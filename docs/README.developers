
This is the beginning of the documentation for OpenMDAO developers that
attempts to explain the process of how OpenMDAO development works, and
how to interact with the various tools we use for configuration management,
testing, deployment, etc.  Right now, this is only a very basic outline
that needs to be greatly improved before it is ready for production use,
so if you're reading this now, consider yourself an alpha tester of the
process.  When you come across something that doesn't work or is confusing,
or you have thought of a way to improve some aspect of the process, please
write it down and email it to Bret.A.Naylor@nasa.gov.

- Creating a branch to work in
    - bzr branch <path to trunk (or other branch)> <my_branch_name>
    - my_branch_name should follow the convention:
        - T<ticket number>-<desc> where
            desc is a short description of what the branch is for
        - for example:
            - T1043-objserver_fix
            
    
- Bootstrapping the branch
    - Create an isolated python environment
        - virtualenv --no-site-packages <my-virtual-dir>
        - cd <my-virtual-dir>
        - Create buildout directory and copy bootstrap.py file there
            - (Windows)   
                - md buildout
                - copy <branch-dir>\branch_config\bootstrap.py buildout
                - copy <branch-dir>\branch_config\buildout.cfg buildout
            - (linux/mac) mkdir buildout
                - cp <branch-dir>/buildout_config/bootstrap.py buildout
                - cp <branch-dir>/buildout_config/buildout.cfg buildout
        - Activate the virtual environment
            - (Windows)  bin\activate
            - (linux/mac)
               - bash (if not already running bash)
               - source bin/activate
        - Bootstrap the buildout environment (only needed the first time)
            - cd buildout
            - python bootstrap.py  # bootstraps zc.buildout
        - Edit buildout.cfg (if necessary)
            - add any eggs/parts needed for your development
        - Run buildout (this should build the full environment needed)
            - bin/buildout
        - Test the buildout
            - bin/test openmdao -v

    - setting up Wing to work with your buildout
        - edit Project Properties
        - add eggs and develop-egg dirs to PYTHONPATH
        - save project
        
- The download cache
    - cd distrib-cache/dist
    - wget <url to distrib>  # pull distrib from the web
    
- Adding new source files
    - bzr commands
    - paster create templates
        - basic package
        - nested namespace package
        
- Testing
    - unittest
    - nose

- Creating new zc.buildout recipes
    - build an egg
    - zc.buildout entry points for each recipe
    - simple API
        - __init__(self, options, name, buildout)
        - install(self)  # returns list of files/dirs for later uninstall
        - update(self)
        - uninstall(self) # usually not necessary


numpy - to build it as a binary egg, I just had to add 'import setuptools'
        at the top of its setup.py file.  Weird.


