#include <InterpIncludes.ncp>


class EngPerf_Assembly extends Element {
//------------------------------------------------------------
//  DOCUMENTATION 
//------------------------------------------------------------

  title = "";


  description = isA() + " calculates overall engine performance results.";

  usageNotes = isA() + 
"

- This element calculates uninstalled engine performance.

- All that needs to be done to get this element to work is to
include it in a model.  (It should be the last element in the
solver sequence.)  It will automatically search the engine for
the appropriate data.

- The element requires that the model user elements of the type
FlightConditions, Inlet, Compressor, Burner, Nozzle.  If the model
is using elements of different type for these calculations then
this element needs to be modified.
 

";

//------------------------------------------------------------
//  SETUP VARIABLES 
//------------------------------------------------------------

  real alt{
    value = 0.0; IOstatus = OUTPUT; units = FT;
    description = "Altitude";    
  }
  real Fg{
    value = 0.0; IOstatus = OUTPUT; units = LBF;
    description = "Overall gross thrust";    
  }
  real Fn{
    value = 0.0; IOstatus = OUTPUT; units = LBF;
    description = "Overall net thrust";    
  }
  real Fnc{
    value = 0.0; IOstatus = OUTPUT; units = LBF;
    description = "Corrected overall net thrust";    
  }
  real Fram{
    value = 0.0; IOstatus = OUTPUT; units = LBF;
    description = "Overall ram drag";    
  }
  real MN{
    value = 0.0; IOstatus = OUTPUT; units = NONE;
    description = "Mach number";    
  }
  real OPR{
    value = 0.0; IOstatus = OUTPUT; units = NONE;
    description = "Engine overall pressure ratio";    
  }
  real SFC{
    value = 0.0; IOstatus = OUTPUT; units = LBM_PER_HR_LBF;
    description = "Specific fuel consumption (same as TSFC, output for ARP)";    
  }
  real TSFC{
    value = 0.0; IOstatus = OUTPUT; units = LBM_PER_HR_LBF;
    description = "Specific fuel consumption";    
  }
  real Wfuel{
    value = 0.0; IOstatus = OUTPUT; units = LBM_PER_SEC;
    description = "Overall fuel flow (per sec)";    
  }
  real WfuelHour{
    value = 0.0; IOstatus = OUTPUT; units = LBM_PER_HR;
    description = "Overall fuel flow (per hour)";    
  }
  real dTs{
    value = 0.0; IOstatus = OUTPUT; units = RANKINE;
    description = "Delta temperature from standard atmosphere";    
  }
  real W{
    value = 0.0; IOstatus = OUTPUT; units = LBM_PER_SEC;
    description = "Engine total airflow";    
  }
  real WAR{
    value = 0.0; IOstatus = OUTPUT; units = NONE;
    description = "Incoming WAR ";    
  }

  // pointer values to store the location of the engine variables
  string _ptralt{ 
	 value = ""; IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for altitude"; 
         hide(1);
  }
  string _ptrdTs{ 
	 value = ""; IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for delta static temperature from standard atmosphere"; 
         hide(1);
  }
  string _ptrMN{ 
	 value = ""; IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for Mach Number"; 
         hide(1);
  }
  string _ptrPs{ 
	 value = ""; IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for ambient pressure"; 
         hide(1);
  }
  string _ptrPt0{ 
	 value = ""; IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for Pt0"; 
         hide(1);
  }
  string _ptrTs{ 
	 value = ""; IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for static temperature"; 
         hide(1);
  }
  string _ptrWair{ 
	 value = ""; IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for air flow"; 
         hide(1);
  }
  string _ptrWAR{ 
	 value = ""; IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for WAR"; 
         hide(1);
  }

  string _ptrFg[]; 
  _ptrFg{ 
    // value = ""; 
    IOstatus=UNSET; units = NONE;
    description = "INTERNAL USE ONLY: reference for gross thrust"; 
         hide(1);
  }
  string _ptrFram[];
  _ptrFram{ 
    // value = ""; 
    IOstatus=UNSET; units = NONE;
    description = "INTERNAL USE ONLY: reference for overall ram drag"; 
         hide(1);
  }
  string _ptrPt3[];
  _ptrPt3{ 
    // value = ""; 
    IOstatus=UNSET; units = NONE;
 	 description = "INTERNAL USE ONLY: reference for Pt3"; 
         hide(1);
  }
  string _ptrWfuel[];
  _ptrWfuel{ 
    // value = ""; 
    IOstatus=UNSET; units = NONE;
	 description = "INTERNAL USE ONLY: reference for fuel flow"; 
         hide(1);
  }
  
  
//------------------------------------------------------------
//  Create lists to store the element names
//------------------------------------------------------------


//------------------------------------------------------------
//  During verify find the necessary elements
//------------------------------------------------------------
  int verify(){

    //------------------------------------------------------------
    // get the the appropritate element lists (start from top)
    //------------------------------------------------------------
    string tpname = "";
    string flights[] = parent.parent.list( "Ambient" );	    
    if (flights.entries() <= 0) {
    //  flights = parent.parent.list( "Ambient" );	      
    //}
    //if (flights.entries() <= 0) {
      error("No FlightConditions or ambient components?");
      return FALSE;
    }
    string inlets[] = parent.parent.list( "Inlet" );
    string compressors[] = parent.parent.list( "Compressor" );
    string nozzles[] = parent.parent.list( "Nozzle" );
    string nasaNozzles[] = parent.parent.list( "OverUnderNozzle" );
    string burners[] = parent.parent.list( "Burner" );
    string nasaburners[] = parent.parent.list( "BurnerNASA" );

    //------------------------------------------------------------
    // Fill the single value arrays
    //------------------------------------------------------------
    string temp = flights[0] + ".MN";
    _ptrMN = temp;

    string temp1 = flights[0] + ".alt";
    _ptralt = temp1;

    string temp2 = flights[0] + ".dTs";
    _ptrdTs = temp2;

    string temp3 = flights[0] + ".WAR";
    _ptrWAR = temp3;

    string temp4 = flights[0] + ".Fl_O.W";
    _ptrWair = temp4;

    string temp5 = flights[0] + ".Fl_O.Ps";
    _ptrPs = temp5;

    string temp10 = flights[0] + ".Fl_O.Pt";
    _ptrPt0 = temp10;

    string temp6 = flights[0] + ".Fl_O.Ts";
    _ptrTs = temp6;


    //------------------------------------------------------------
    // clear the arrays and refill them with data
    //------------------------------------------------------------
    int i;

    for ( i = _ptrFram.entries(); i > 0; i-- ){
      	_ptrFram.remove( _ptrFram[i-1] );
    }

    for ( i = 0; i < inlets.entries(); i++ ){
	string temp7 = inlets[i] + ".Fram";
    	_ptrFram.append( temp7 );
    }


    for ( i = _ptrPt3.entries(); i > 0; i-- ){
      	_ptrPt3.remove( _ptrPt3[i-1] );
    }

    for ( i = 0; i < compressors.entries(); i++ ){
	string temp11 = compressors[i] + ".Fl_O.Pt";
    	_ptrPt3.append( temp11 );
    }

    for ( i = _ptrFg.entries(); i > 0; i-- ){
       _ptrFg.remove( _ptrFg[i-1] );
    }

    for ( i = 0; i < nozzles.entries(); i++ ){
    string temp8 = nozzles[i] + ".Fg";
    _ptrFg.append( temp8 );
    }

    for ( i = 0; i < nasaNozzles.entries(); i++ ){
    string temp81 = nasaNozzles[i] + ".Fg";
    _ptrFg.append( temp81 );
    }

    for ( i = _ptrWfuel.entries(); i > 0; i-- ){
    _ptrWfuel.remove( _ptrWfuel[i-1]);
    }

    for ( i = 0; i < burners.entries(); i++ ){
    string temp9 = burners[i] + ".Wfuel";
    _ptrWfuel.append( temp9 );
    }

    for ( i = 0; i < nasaburners.entries(); i++ ){
    string temp91 = nasaburners[i] + ".Wfuel";
    _ptrWfuel.append( temp91 );
    }

    return 1;

  }

//------------------------------------------------------------
//  Calculate the performance
//------------------------------------------------------------
  void calculate(){

    int i;  //loop counter

    //------------------------------------------------------------
    //  Zero out the running totals
    //------------------------------------------------------------
    Fram=0;
    Fn=0;
    Fg=0;
    TSFC=0;
    Wfuel=0;
    W=0.;

    //------------------------------------------------------------
    //  Grab data from the FlightConditions 
    //------------------------------------------------------------
    MN = _ptrMN->value;
    alt = _ptralt->value;
    dTs = _ptrdTs->value;
    WAR = _ptrWAR->value;
    W = _ptrWair->value;

    //---------------------------------------------------------------------
    // Sum up Drag from inlets
    //---------------------------------------------------------------------
    Fram = 0;
    for( i=0; i < _ptrFram.entries(); i+=1 ){
        Fram = Fram + _ptrFram[i]->value;
    }

    //---------------------------------------------------------------------
    // Find Pt3 and calculate OPR
    //---------------------------------------------------------------------
    real Pt3 = 0;
    for( i=0; i < _ptrPt3.entries(); i+=1 ){
	if ( _ptrPt3[i]->value > Pt3 ){
	 Pt3 = _ptrPt3[i]->value;
	}
    }
    OPR = Pt3 / _ptrPt0->value;

    //---------------------------------------------------------------------
    // Sum up burner fuel flows
    //---------------------------------------------------------------------
    Wfuel = 0;
    for( i=0; i < _ptrWfuel.entries(); i+=1 ){
        Wfuel = Wfuel + _ptrWfuel[i]->value;
    }

    //---------------------------------------------------------------------
    // Sum up nozzle gross thrusts 
    //---------------------------------------------------------------------
    Fg = 0;
    for( i=0; i < _ptrFg.entries(); i+=1 ){
        Fg = Fg + _ptrFg[i]->value;
    }


    //---------------------------------------------------------------------
    // Calculate overall values
    //---------------------------------------------------------------------
    Fn = Fg - Fram;
    WfuelHour = Wfuel * 3600.0; // LBM/SEC -> LBM/hr
    TSFC = WfuelHour / Fn;
    SFC = TSFC;
  }
}
