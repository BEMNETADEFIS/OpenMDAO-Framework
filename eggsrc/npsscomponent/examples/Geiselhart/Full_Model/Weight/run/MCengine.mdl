MixedTurboFan engine;
engine.init();// initialization routine for the engine is necessary, do not delete!

// Set these Design Variables
engine.FanPRdes = 2.51;
engine.HpcPRdes = 8.0;
engine.TOCThrust = 5230;
engine.MN = 1.8;

// Check the output in this file to test for failed case
//     if failed = 0; Then your ok!
//     if failed = 1; Then your design did not converge
//     an explaination will be included in the file
//     ** ignore failure messages printed to the screen, they are intermediate cases
OutFileStream failCheck { filename = "failureCheck.out"; }

// Run Off Design Cases to supply the WATE model
real ODFailCount = 0;
void runODPoint() { 
  engine.setup(); engine.run();
  if (!engine.solver.converged) {
    engine.ambient.ZMN += .01;
    engine.setup(); engine.run();
    cout << "MN: " << engine.ambient.ZMN << " alt: " << engine.ambient.Zalt << " failed" << endl;
    engine.page.display(); 
  }  
}

int mcReload = FALSE;

string mcInputs[] = {
   "engine.ambient.Zalt",
   "engine.ambient.ZMN",
   "engine.extractionRatio",
   "engine.FanPRdes",
   "engine.HpcPRdes",
   "engine.nozzle.Cfg",
   "engine.TOCThrust"
};

void mcRun() {
   int i;
   cout << "\nWeight MCengine mcRun() executing in " << getcwd() << endl;

   LocalOutFileStream out;
   out.open("NPSS_WATE.textRep");
   out << .getTextRep(TRUE);
   out.close();

   for (i = 0 ; i < mcInputs.entries() ; ++i) {
     cout << "    " << mcInputs[i] << " = " << mcInputs[i]->value << endl;
   }

   // This model needs a reload after the initial run.
   mcReload = TRUE;

   // Do the stuff associated with running the model.
   parseFile("MCengine.run");
   // run();

   // Display data viewers and set-up for a new run's display.
   string dataViewers[] = list("DataViewer", TRUE);
   for (i = 0 ; i < dataViewers.entries() ; ++i) {
     string dataViewer = dataViewers[i];
     dataViewer->display();
     dataViewer->reset();

     // Reset the filename to start a new output file.
     // Without this, rerunning a model will append to the file.
     // This is not necessary if the model is reloaded.
     string prefix = "";
     if (dataViewer->outStreamHandle[0] != ".") {
       // Not absolute, so get context.
       string path = dataViewer;
       int dot;
       while ((dot = path.index(".")) > 0) {
         prefix += path.substr(0, dot+1);
         path = path.substr(dot+1, -1);
       }
     }
     string handle = prefix+dataViewer->outStreamHandle;
     handle->filename = handle->filename;
   }

   cout.flush();
   cerr.flush();
}
