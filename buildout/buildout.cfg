[buildout]
# We can 'extend' another (could also be mutiple) buildout config file
# We could also supply URLs here to use remote configs
#extends = base.cfg

#log-level = DEBUG

develop = 
   ../openmdao.main
   ../openmdao.lib
   ../openmdao.recipes
   ../openmdao.util
   ../openmdao.test
   ../openmdao.examples
#   ../contrib/npsscomponent

parts = 
   rec
   app
   pylint
   wingsetup
   sphinxbuild
#   eggbundler

## NOTE: eggs actually live in the 'dist' dir under the specified
## download-cache
#download-cache = /OpenMDAO/distrib-cache
#install-from-cache = true
newest = false

# buildout only seems to allow one index :(
index = http://torpedo.grc.nasa.gov:31001
# add a link to the proprietary egg server
find-links = http://torpedo.grc.nasa.gov:31002/pyNPSS

# put the name of a group where versions are specified here
#versions = release

# this contains a list of specific version
#[release]
#zc.recip.egg = 1.1.0
#setuptools = 0.6c8
#pyNPSS = 1.6.5B

[rec]
recipe = zc.recipe.egg:scripts

eggs = zc.recipe.egg


[wingsetup]
recipe = openmdao.recipes:wingproj

# NOTE: using zc.recipe.egg, you can specify version
# requirements, for example:
# eggs = openmdao.main==1.2
#        openmdao.lib>=0.4
[app]
#recipe = zc.recipe.egg:scripts
recipe = openmdao.recipes:isolatedegg

# put all of the eggs this part depends on here
eggs = 
       openmdao.main
       openmdao.lib
       openmdao.util
       openmdao.recipes
       openmdao.test
       openmdao.examples
#       npsscomponent
       pylint

#relative-paths = true

# running the m4 examples require extra paths (some are site specific)
#extra-paths = ${buildout:directory}/../contrib
#              /usr/local/lib/python2.5/site-packages

# 'test' is an openmdao wrapper around nosetest that understands a command
# line arg of '--all' and a list of packages/dirs containing all openmdao
# tests. Otherwise it functions the same as nosetest.
scripts = openmdaotest=test

# custom python interpreter with all of the paths we need
interpreter = python

[sphinxbuild]
recipe = openmdao.recipes:sphinxbuild

# You can put a specific browser here. Otherwise, you get default for
# that platform.  Some available names (from webbrowser module docs) are:
# firefox
# opera
# windows-default
# macosx

#browser = firefox  

eggs = ${app:eggs}

# this specifies the packages to generate API docs for
packages = openmdao.main
           openmdao.lib
           openmdao.recipes
           openmdao.util
#           npsscomponent
#           pyNPSS

srcmods = scripts/dumpeggmeta.py

#srcdirs = scripts
 
[pylint]
#recipe = zc.recipe.egg
recipe = openmdao.recipes:isolatedegg
eggs = ${app:eggs}
       pylint
entry-points = pylint=pylint.lint:Run
arguments = sys.argv[1:]



