[buildout]
# We can 'extend' another (could also be mutiple) buildout config file
# We could also supply URLs here to use remote configs
#extends = base.cfg

#log-level = DEBUG

develop = 
   ../openmdao.main
   ../openmdao.lib
   ../openmdao.recipes
   ../openmdao.util
   ../openmdao.test
   ../openmdao.examples
   ../contrib/npsscomponent

parts = 
   rec
   app
   tools
   wingsetup
   sphinxbuild
   meta
#   eggbundler

## NOTE: eggs actually live in the 'dist' dir under the specified
## download-cache
#download-cache = /OpenMDAO/distrib-cache
#install-from-cache = true
newest = false

# buildout only seems to allow one index :(
index = http://torpedo.grc.nasa.gov:31001
# add a link to the proprietary egg server
#find-links = http://torpedo.grc.nasa.gov:31002
find-links = file:///OpenMDAO-Proprietary/eggs/

# put the name of a group where versions are specified here
versions = release

# this contains a list of specific version
[release]
pyNPSS >= 1.6.5C
#zc.recip.egg = 1.1.0
#setuptools = 0.6c8

[rec]
recipe = zc.recipe.egg:scripts

eggs = zc.recipe.egg


[wingsetup]
recipe = openmdao.recipes:wingproj

# This part will generate a file in parts/metadata/metadata.txt
# that contains a dictionary with the licenses of all distributions
# that [app] depends on. The metacollector recipe can be used to
# pull any metadata out of dependent distributions, but only
# 'license' is being pulled out in this case.
[meta]
recipe = openmdao.recipes:metacollector
eggs = ${app:eggs}
meta_names = license

# NOTE: you can specify version requirements, for example:
# eggs = openmdao.main==1.2
#        openmdao.lib>=0.4
[app]
#recipe = zc.recipe.egg:scripts
recipe = openmdao.recipes:isolatedegg

# put all of the eggs that openmdao depends on here
eggs = 
       openmdao.main
       openmdao.lib
       openmdao.util
       openmdao.recipes
       openmdao.test
       openmdao.examples
       npsscomponent

#relative-paths = true

# running the m4 examples require extra paths (some are site specific)
#extra-paths = ${buildout:directory}/../contrib
#              /usr/local/lib/python2.5/site-packages

# 'test' is an openmdao wrapper around nosetest that understands a command
# line arg of '--all' and a list of packages/dirs containing all openmdao
# tests. Otherwise it functions the same as nosetest.
scripts = openmdaotest=test

# custom python interpreter with all of the paths we need
interpreter = python

[sphinxbuild]
recipe = openmdao.recipes:sphinxbuild

# You can put a specific browser here. Otherwise, you get default for
# that platform.  Some available names (from webbrowser module docs) are:
# firefox
# opera
# windows-default
# macosx

#browser = firefox  

eggs = ${app:eggs}

# this specifies the packages to generate API docs for
packages = openmdao.main
           openmdao.lib
           openmdao.recipes
           openmdao.util
           npsscomponent
           pyNPSS

srcmods = scripts/dumpeggmeta.py


# The tools example below shows one of the really cool
# features of buildout. You can create your own bin scripts
# that run a function you specify inside of an egg by
# creating your own entry points right here in the config
# file. The example below creates a bin/pylint script that
# runs pylint (from within its own egg via pkg_resources)
# with sys.path hard wired so it can see
# all of the eggs in our app. Note also that we're specifying
# the arguments that get passed to the pylint.lint.Run function.
[tools]
#recipe = zc.recipe.egg
recipe = openmdao.recipes:isolatedegg
eggs = ${app:eggs}
       pylint
entry-points = pylint=pylint.lint:Run
arguments = sys.argv[1:]
# we need to specify only scripts that expect an arg of sys.argv[1:]
# below. Otherwise,
# this recipe will overwrite any console scripts found in 
# ${app:eggs} and supply them with an arg of sys.argv[1:],
# which we may not want.  The scripts attribute here limits
# the generated scripts to only those named in the scripts
# list.
scripts = pylint
          mod2egg


